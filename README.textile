h1. Glitter: an embedded Scala DSL for writing HTML

h2. Why?

I like the comfort of *static typing*, so, inspired from "Blaze HTML":http://jaspervdj.be/blaze/, Glitter is a proof of concept of an *embedded Scala DSL* allowing to write HTML templates with a "haml":http://www.haml-lang.com like syntax, but directly *in your Scala code*.

You can see "my personal website":https://github.com/julienrf/julienrf/blob/master/src/main/scala/julienrf/Site.scala as an example of website entirely written in Scala with Glitter.

h2. Overview

Here is a small example giving a quick overview of what Glitter is.

bc.. import glitter.Glitter._
import glitter.Xml

object Templates {
  def layout(body: Xml) =
    html5dtd | 'html (
        'head :: 'title :: "Glitter is amazing!"
      | 'body :: body
    )

  def show(name: String) =
    layout (
        'h1 :: "Show user"
      | 'p :: ("Hello " | 'strong(name) | "!")
    )

  def index(users: List[String]) =
    layout (
        'h1 :: "User list"
      | 'ul %('class->"user-list") :: forM (users) (user => 'li :: user)
    )
}

p. You can try to render these two templates:

bc.. scala> Templates.show("Julien").render
res6: String = 
<!DOCTYPE html>
<html>
  <head>
    <title>Glitter is amazing!</title>
  </head>
  <body>
    <h1>Show user</h1>
    <p>Hello <strong>Julien</strong>!</p>
  </body>
</html>

scala> Templates.index(List("Julien", "Paul", "Christopher")).render
res7: String = 
<!DOCTYPE html>
<html>
  <head>
    <title>Glitter is amazing!</title>
  </head>
  <body>
    <h1>User list</h1>
    <ul class="user-list">
      <li>Julien</li>
      <li>Paul</li>
      <li>Christopher</li>
    </ul>
  </body>
</html>
}}}

h3. Syntax

To use Glitter you first need to import the definitions of the @glitter.Glitter@ object:

bc. import glitter.Glitter._

Then write your templates, e.g. in an object:

bc. object Templates {
  def index: Xml = …
}

To make a tag, use a symbol:

bc.   def index: Xml = 'div

If you try to render this template, you will get the @<div />@ string:

bc. scala> Templates.index.render
res0: String = <div />

Under the hood it uses an implicit conversion from @Symbol@ to the @EmptyTag@ case class. You need to explicit the return type of your template to make it work.

You can also write plain text, using a @String@:

bc.   def index: Xml = "foo"

Ok, nothing amazing, you’re right. Now you can nest content in tags using the @::@ operator:

bc.   def index: Xml = 'div :: "foo"

Calling this template will produce the following result:

bc. scala> Templates.index.render
res2: String = <div>foo</div>

You can also write a sequence of xml content, just separate each element (tag or text) with @|@:

bc.   def index: Xml = 'span :: "foo" | 'span :: "bar"

bc. scala> Templates.index.render                                          
res3: String = <span>foo</span><span>bar</span>

As you can see, the @::@ operator has a higher precedence than the @|@ operator. If you want to nest several elements in a tag you need to enclose them in brackets:

bc.   def index: Xml = 'div :: ('span :: "foo" | 'span :: "bar")

Actually the @::@ operator is optional when you use brackets, so the previous example is the same as the following:

bc.   def index: Xml = 'div ('span :: "foo" | 'span :: "bar")

Finally, you can add attributes to the tags using the @%@ operator:

bc.   def index: Xml = 'img %('src->"/static/images/my_cat.jpg", 'alt->"picture of my cat", 'title->"My Cat")

bc. scala> Templates.index.render                                                             
res4: String = <img src="/static/images/my_cat.jpg" alt="picture of my cat" title="My Cat" />

That’s all for the DSL part. Easy, isn’t it?

h2. Advanced Usage

h3. Layouts and fragments

Since Glitter templates are nothing but Scala functions, you can use function composition to have reusable templates fragments:

bc.. import glitter._
import glitter.Glitter._

object Layouts {
  def main(content: Xml): Xml =
    html5dtd | 'html %('lang->"en") :: (
        'head :: 'title :: "Title"
      | _header
      | _content(content)
      | _footer
    )

  def _header: Xml =
    'header (
        'h1 :: 'a %('href->"/") :: "Home"
    )

  def _footer: Xml =
    'footer :: "© 2011"

  def _content(content: Xml): Xml =
    'section :: content
}

object Templates {
  def index: Xml =
    Layout.main(
        'h2 :: "Index"
      | 'p :: "…"
    )
}

p. I’m used to prefix templates fragments by an underscore, but that’s not mandatory at all. So, here you see how you can simulate what’s usually called template inheritance (the @index@ template “extends” the @main@ template layout) and template inclusion (@main@ layout “includes” the fragments @_header@, @_footer@ and @_content@), just by calling

h3. Control structures

You can use the Scala @if@ directly:

bc. def _userInfo(user: User): Xml =
  'div :: (if (user.isAdmin) "foo" else "bar")

To iterate through a collection you can use the @forM[A](elmts: Iterable[A])(bind: A => Xml): Xml@ control structure provided by Glitter:

bc. def listArticles(articles: List[Article]): Xml =
  'ul :: forM(articles) ('li :: _.name)

The @forM@ function takes an @Iterable[A]@ as its first parameter and a function of type @A => Xml@. It produces a sequence of xml content (using the @|@ operator between all the collection elements).

If the sequence is emtpy, the @forM@ function returns the @Empty@ object which is of type @Xml@ but renders to nothing.

h3. Render templates

You can render any @Xml@ content by using its @render(r: Renderer)@ function. By default this function will use an implicit simple renderer writing the content into a string, as XHTML (without any kind of formatting).

h3. Misc.

h4. Write raw content

By default string converted to xml text are HTML escaped (e.g. “<” are transformed to “&lt;”). You can disable this behavior using the @raw@ method:

bc. def myHtml5dtd: Xml = "<!DOCTYPE html>\n".raw

h4. Empty

Glitter provides an object of type @Xml@ but doing nothing: @Empty@. It may be useful in some cases, eg:

bc. def _adminArea(user: User): Xml =
  if (user.isAdmin) 'a %('href->"/admin") :: "Manage"
  else Empty
